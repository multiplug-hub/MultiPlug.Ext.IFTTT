@model MultiPlug.Base.Http.EdgeApp

@functions
{
    string isConnected(bool theValue)
    {
        return (theValue) ? "<i class=\"icon-ok icon-large\"></i>" : "<i class=\"icon-remove icon-large\"></i>";
    }

    string CurrentValue(string[] theValues, int theIndex)
    {
        if(theIndex < theValues.Length)
        {
            return theValues[theIndex];
        }
        return string.Empty;
    }
}

<form action="" method="post" accept-charset="utf-8" enctype="application/x-www-form-urlencoded" autocomplete="off">
    <section class="row-fluid">

        <div class="row-fluid">
            <div class="box">
                <div class="span3">
                    <a href="/"><img alt="IFTTT" src="@Raw(Model.Context.Paths.Assets)images/ifttt.png"></a>
                </div>
                <div class="span6">
                    <p style="font-size:22.75px; padding-top:10px; text-align: center;">Cache</p>
                </div>
                <div class="span3" style="text-align:right">
                    <button type="submit" value="submit" style="height:40px;" class="item btn"><i class="icon-save icon-large"></i> Save</button>
                </div>
            </div>
        </div>

        @Include("MultiPlug.Ext.IFTTT.IFTTTNavigation")

        <input type="hidden" name="Guid" value="@Model.Extension.Model.Guid">

        <div class="row-fluid">
            <div class="span6">
                <h3 class="box-header">
                    Response Event
                </h3>
                <div class="box non-collapsible">
                    <div class="row-fluid">
                        <div class="span6">
                            <div class="row-fluid"><div class="span12">Event ID</div></div>
                            <div class="row-fluid">
                                <div class="span12">
                                    <input type="hidden" name="Guid" value="@Model.Extension.Model.Guid">
                                    <input name="EventId" class="input-block-level" type="text" placeholder="Event ID" value="@Model.Extension.Model.EventId">
                                </div>
                            </div>
                        </div>
                        <div class="span6">
                            <div class="row-fluid"><div class="span12">Description</div></div>
                            <div class="row-fluid"><div class="span12"><input name="EventDescription" class="input-block-level" type="text" placeholder="Description" value="@Model.Extension.Model.EventDescription"></div></div>
                        </div>
                    </div>
                    <div class="row-fluid">
                        <div class="span6">
                            <div class="row-fluid"><div class="span12">Invoke Event On Subject Value</div></div>
                            <div class="row-fluid"><div class="span12"><input name="InvokeEventOnSubjectValue" class="input-block-level" type="text" placeholder="" value="@Model.Extension.Model.InvokeEventOnSubjectValue"></div></div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="span6">
                <h3 class="box-header">
                    Response Subjects
                </h3>
                <div class="box non-collapsible">

                    <ul id="EventSubjects" style="list-style: none;">
                        <li>
                            <div class="row-fluid">
                                <div class="span2">
                                </div>
                                <div class="span5">
                                    <p>Subject</p>
                                </div>
                                <div class="span5">
                                    <p>Current Value</p>
                                </div>
                            </div>
                        </li>


                        @for (int i = 0; i < @Model.Extension.Model.EventSubjects.Length; i++)
                        {
                            <li>
                                <div class="row-fluid">
                                    <div class="span2">
                                        <button value="@Model.Extension.Model.EventSubjects[i]" data-sub-type="start" type="button" class="item btn btn-red delete-subject"><i class="icon-trash"></i></button>
                                    </div>
                                    <div class="span5">
                                        <input name="EventSubjects" type="text" value="@Model.Extension.Model.EventSubjects[i]" class="input-block-level">
                                    </div>
                                    <div class="span5">
                                        @Raw(CurrentValue(Model.Extension.Model.CurrentValues, i))
                                    </div>
                                </div>
                            </li>
                        }
                    </ul>
                    <ul style="list-style: none;">
                        <li>
                            <div class="control-group">
                                <div class="controls">
                                    <div class="span2">
                                        <button type="button" id="NewSubject" class="btn btn-green"><i class="icon-plus"></i></button>
                                    </div>
                                    <div class="span5">
                                    </div>
                                    <div class="span5">
                                    </div>
                                </div>
                            </div>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <div class="row-fluid">
            <div class="span6">
                <h3 class="box-header">
                    Cache Value Subscriptions
                </h3>
                <div class="box non-collapsible">

                    <ul id="Subscriptions" style="list-style: none;">
@for (int i = 0; i < @Model.Extension.Model.SubscriptionGuid.Length; i++)
{
                        <li>
                            <div class="control-group">
                                <div class="controls">
                                    <div class="span2">
                                        <button value="@Model.Extension.Model.SubscriptionGuid[i]" data-sub-type="cachevalue" type="button" class="item btn btn-red delete-sub"><i class="icon-trash"></i></button>
                                    </div>
                                    <div class="span9">
                                        <input name="SubscriptionGuid" type="hidden" value="@Model.Extension.Model.SubscriptionGuid[i]" />
                                        <input name="SubscriptionId" type="text" value="@Model.Extension.Model.SubscriptionId[i]" class="input-block-level mp-event-picker">
                                    </div>
                                    <div class="span1">
                                        @Raw(isConnected(Model.Extension.Model.SubscriptionConnected[i]))
                                    </div>
                                </div>
                            </div>
                        </li>
}
                    </ul>
                    <ul style="list-style: none;">
                        <li>
                            <div class="control-group">
                                <div class="controls">
                                    <div class="span2">
                                        <button type="button" id="NewSubscription" class="btn btn-green"><i class="icon-plus"></i></button>
                                    </div>
                                    <div class="span10">
                                    </div>
                                </div>
                            </div>
                        </li>
                    </ul>

                </div>
            </div>

            <div class="span6">
                <h3 class="box-header">
                    Request Subscriptions
                </h3>
                <div class="box non-collapsible">

                    <ul id="RequestSubscriptions" style="list-style: none;">
                        @for (int i = 0; i < @Model.Extension.Model.RequestSubscriptionGuid.Length; i++)
                        {
                            <li>
                                <div class="control-group">
                                    <div class="controls">
                                        <div class="span2">
                                            <button value="@Model.Extension.Model.RequestSubscriptionGuid[i]" data-sub-type="request" type="button" class="item btn btn-red delete-sub"><i class="icon-trash"></i></button>
                                        </div>
                                        <div class="span9">
                                            <input name="RequestSubscriptionGuid" type="hidden" value="@Model.Extension.Model.RequestSubscriptionGuid[i]" />
                                            <input name="RequestSubscriptionId" type="text" value="@Model.Extension.Model.RequestSubscriptionId[i]" class="input-block-level mp-event-picker">
                                        </div>
                                        <div class="span1">
                                            @Raw(isConnected(Model.Extension.Model.RequestSubscriptionConnected[i]))
                                        </div>
                                    </div>
                                </div>
                            </li>
                        }
                    </ul>
                    <ul style="list-style: none;">
                        <li>
                            <div class="control-group">
                                <div class="controls">
                                    <div class="span2">
                                        <button type="button" id="NewRequestSubscription" class="btn btn-green"><i class="icon-plus"></i></button>
                                    </div>
                                    <div class="span10">
                                    </div>
                                </div>
                            </div>
                        </li>
                    </ul>

                </div>
            </div>
        </div>
    </section>
</form>

<script type="text/javascript" src="@Raw(Model.Context.Paths.Assets)js/jquery.dirty.min.js"></script>
<script>

@if ( string.IsNullOrEmpty( Model.Extension.Model.Guid))
{
    <text>$("form").dirty("setAsDirty");</text>
}

    function newSubject() {
        return '<li>\
                <div class="row-fluid">\
                        <div class="span2"></div>\
                        <div class="span5"><input name="EventSubjects" type="text" value="" class="input-block-level mp-event-picker"></div>\
                        <div class="span5"></div>\
                </div>\
            </li>';
    }

    $('#NewSubject').on('click', function () {
        $('#EventSubjects').append(newSubject());
        var NewSubject = $('#EventSubjects li:last-child');
        ApplyLocalDelete(NewSubject.find(':button'));
        $("form").dirty("setAsDirty");
    });

    function newRequestSubscriptionElement() {
        return '<li>\
            <div class="control-group">\
                <div class="controls">\
                    <div class="span2">\
                    </div>\
                    <div class="span9">\
                        <input name="RequestSubscriptionGuid" type="hidden" value="">\
                        <input name="RequestSubscriptionId" type="text" value="" class="input-block-level mp-event-picker">\
                    </div>\
                    <div class="span1">\
                        <i class=\"icon-remove icon-large\"></i>\
                    </div>\
                </div>\
            </div>\
        </li>';
    }

    $('#NewRequestSubscription').on('click', function () {
        $('#RequestSubscriptions').append(newRequestSubscriptionElement());
        var NewSubscription = $('#RequestSubscriptions li:last-child');
        applyMPEventPickerOnClick();
        ApplyDelete(NewSubscription.find(':button'));
        $("form").dirty("setAsDirty");
    });

    function newSubElement() {
        return '<li>\
            <div class="control-group">\
                <div class="controls">\
                    <div class="span2">\
                    </div>\
                    <div class="span9">\
                        <input name="SubscriptionGuid" type="hidden" value="">\
                        <input name="SubscriptionId" type="text" value="" class="input-block-level mp-event-picker">\
                    </div>\
                    <div class="span1">\
                        <i class=\"icon-remove icon-large\"></i>\
                    </div>\
                </div>\
            </div>\
        </li>';
    }

    $('#NewSubscription').on('click', function () {
        $('#Subscriptions').append(newSubElement());
        var NewSubscription = $('#Subscriptions li:last-child');
        applyMPEventPickerOnClick();
        ApplyDelete(NewSubscription.find(':button'));
        $("form").dirty("setAsDirty");
    });

    function ApplyDelete(theSelector) {
        $(theSelector).on('click', '.delete-sub', function () {
            var id = $(this).attr('value');
            var subtype = $(this).data('sub-type');
            var closestli = $(this).closest("li");
            if (confirm("Delete the Subscription?")) {
                $.ajax({
                    type: "POST",
                    url: '@Raw(Model.Context.Paths.Current)subscriptiondelete/?id=@Model.Extension.Model.Guid&subtype=' + subtype + '&subid=' + id,
                    success: function () {
                        closestli.remove();
                    }
                });
            }
        });
    }

    function ApplyLocalDelete(theSelector) {
        $(theSelector).on('click', '.delete-subject', function () {
            var id = $(this).attr('value');
            var closestli = $(this).closest("li");
            closestli.remove();
            $("form").dirty("setAsDirty");
        });
    }

    ApplyDelete(document);
    ApplyLocalDelete(document);

</script>
